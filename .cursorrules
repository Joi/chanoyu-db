# Cursor AI Rules and Context for Chanoyu-DB

## IMPORTANT PROJECT FILES TO REFERENCE
Always check these files first:
- CLAUDE.md - AI collaboration guidelines
- TASKS.md - Current work items
- README.md - Project overview
- docs/ARCHITECTURE.md - System design
- docs/WORKFLOW.md - Deployment process

## PROJECT CONTEXT
This is a Next.js + Supabase application for managing tea ceremony (chanoyu) collections with bilingual support (EN/JA).

Tech Stack:
- Frontend: Next.js 14 (App Router)
- Database: Supabase (Postgres with RLS)
- TypeScript: strict, no `any`
- Deployment: Vercel
- Integrations: Notion / Google Sheets for ingestion

## GENERAL RULES
1. Follow patterns in existing code (see `/app`, `/lib`, `/supabase`).
2. Respect RLS and security boundaries; never propose bypasses.
3. No `any` types — use strict, explicit typing.
4. Test locally (`npm run dev`) before suggesting multi-file changes.
5. Keep changes small and reviewable; one concern per change.
6. When unsure, consult `CLAUDE.md`, `TASKS.md`, and `docs/ARCHITECTURE.md`.

## CODE PATTERNS TO FOLLOW
- Prefer server components for data fetching unless client interactivity is required.
- Use Supabase client patterns already present in `/lib/supabase`.
- Keep UI consistent; follow existing Tailwind conventions.
- For migrations/SQL, keep them idempotent and reference RLS expectations.
- Write tests where applicable (unit/integration/e2e per `docs/TESTING.md` if present).

## FILE/DOMAIN MAPPING (GUIDE)
- `/app` — routes, server/client components
- `/lib` — shared utils, data access, clients
- `/supabase` — SQL, policies, seeds
- `/scripts` — maintenance/ingestion tasks
- `docs/*` — architecture, workflow, testing
- Data domains: `objects`, `media`, `classifications` (AAT/Wikidata)

## WHEN WORKING ON TASKS
1. Check `TASKS.md` for scope.
2. Identify related code paths using the mappings above.
3. Keep the diff focused on the task.
4. Update `TASKS.md` upon completion when appropriate.

## IF YOU GET STUCK
- Review patterns in `/app` and `/lib`.
- Re-read `docs/ARCHITECTURE.md`.
- Test queries in the Supabase dashboard.
- Prefer minimal, reversible changes.

---

## AI ROLE INSTRUCTIONS (REFERENCE)
- Role-specific instructions (FeatureDesigner, Debugger, Documenter, Tester, Architect, Designer) are defined in **`cursor.json`** at the repo root.
- To invoke: say “Act as X” or “You are the X”.
- `.cursorrules` sets the guardrails; `cursor.json` defines roles. If there’s ever a conflict, `.cursorrules` takes precedence.

## SECURITY & PRIVACY
- Never paste secrets (Supabase keys, OAuth tokens). Redact `.env*`.
- Treat PII and private URLs as confidential. Prefer examples or mocks.
- Follow RLS expectations when proposing SQL or data access code.

## REFERENCES
- Roles: `cursor.json`
- Guardrails: `.cursorrules` (this file)
- Collaboration: `CLAUDE.md`
- Tasks: `TASKS.md`
- System design: `docs/ARCHITECTURE.md`